name: Build cryptad snap (amd64/arm64)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version>"
        required: false
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        default: "main"

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm

    steps:
      - name: Checkout release-ops repo
        uses: actions/checkout@v4

      - name: Decide upstream ref
        id: ref
        run: |
          set -euo pipefail
          echo "::group::Select upstream ref"
          if [ -n "${{ inputs.version }}" ]; then
            SELECTED="release/${{ inputs.version }}"
          else
            SELECTED="${{ inputs.branch }}"
          fi
          echo "::debug::Selected upstream ref: $SELECTED"
          echo "ref=$SELECTED" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

      - name: Checkout upstream cryptad (${{ steps.ref.outputs.ref }})
        uses: actions/checkout@v4
        with:
          repository: crypta-network/cryptad
          ref: ${{ steps.ref.outputs.ref }}
          path: upstream

      - name: Set up JDK 21 (temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: Determine version via gradle printVersion or fallback
        id: ver
        working-directory: upstream
        run: |
          set -euo pipefail
          D(){ echo "::debug::$*"; }
          echo "::group::Resolve version"
          VERSION_INPUT='${{ inputs.version }}'
          if [ -n "$VERSION_INPUT" ]; then
            VERSION="$VERSION_INPUT"
          else
            VERSION=""
            echo "::group::List Gradle tasks"
            D "Listing Gradle tasks (for printVersion)..."
            if ! ./gradlew -q tasks --all > ../_gradle_tasks.txt 2>&1; then
              D "gradlew tasks failed (continuing). Exit recorded."
            fi
            D "Tasks grep (printVersion):"
            grep -i "printVersion" ../_gradle_tasks.txt | sed 's/^/::debug::[tasks] /' || true
            echo "::endgroup::"
            if grep -Eq '(^|\s)printVersion(\s|$)' ../_gradle_tasks.txt; then
              echo "::group::Run printVersion task"
              D "printVersion task detected; invoking..."
              if ./gradlew -q printVersion > ../_printVersion.txt 2>&1; then
                tail -n +1 ../_printVersion.txt | sed 's/^/::debug::[printVersion] /'
                VERSION=$(tail -n1 ../_printVersion.txt | tr -d '\r\n\t' | xargs || true)
              else
                D "printVersion task run failed (continuing)."
              fi
              echo "::endgroup::"
            else
              D "No printVersion task found."
            fi
            if [ -z "$VERSION" ]; then
              echo "::group::Gradle properties (version)"
              D "Querying Gradle properties for project version..."
              if ./gradlew -q properties > ../_gradle_properties.txt 2>&1; then
                tail -n +1 ../_gradle_properties.txt | sed 's/^/::debug::[properties] /' | head -n 40 || true
                PVER=$(awk -F': ' '/^version:/{print $2; exit}' ../_gradle_properties.txt)
                PVER=$(echo "$PVER" | tr -d '\r\n\t' | xargs)
              else
                D "gradlew properties failed (continuing)."
                PVER=""
              fi
              if [ -n "$PVER" ] && [ "$PVER" != "unspecified" ]; then
                VERSION="$PVER"
              fi
              echo "::endgroup::"
            fi
            if [ -z "$VERSION" ]; then
              echo "::group::git describe fallback"
              # Last resort: use git describe (strip leading 'v')
              VERSION=$(git describe --tags --always --abbrev=0 2>/dev/null | sed 's/^v//') || true
              D "git describe version candidate: ${VERSION:-<empty>}"
              echo "::endgroup::"
            fi
          fi
          if [ -z "$VERSION" ]; then
            echo "::error::Unable to determine version"
            exit 1
          fi
          echo "::debug::Resolved version: $VERSION"
          echo "version=$VERSION" | tee -a "$GITHUB_OUTPUT"
          echo "::endgroup::"

      - name: Build upstream project (dist)
        id: build
        working-directory: upstream
        run: |
          set -euo pipefail
          D(){ echo "::debug::$*"; }
          # Build (skip tests for speed/CI stability)
          echo "::group::Java/Gradle versions"
          D "Java version:" && (java -version 2>&1 | sed 's/^/::debug::[java] /') || true
          D "Gradle version:" && (./gradlew -v 2>&1 | sed 's/^/::debug::[gradle] /') || true
          echo "::endgroup::"
          echo "::group::Gradle build"
          ./gradlew -S -x test build || ./gradlew -S build
          echo "::endgroup::"
          # Expected tarball path
          VERSION="${{ steps.ver.outputs.version }}"
          TARBALL="build/distributions/cryptad-v${VERSION}.tar.gz"
          echo "::group::Locate distribution tarball"
          D "Looking for $TARBALL"
          (ls -la build/distributions | sed 's/^/::debug::[dist] /') || true
          if [ ! -f "$TARBALL" ]; then
            # Fallback: find any cryptad*.tar.gz built artifact
            TARBALL=$(find build -type f -name 'cryptad-*.tar.gz' | head -n1 || true)
            D "Fallback tarball: ${TARBALL:-<none>}"
          fi
          if [ -z "$TARBALL" ] || [ ! -f "$TARBALL" ]; then
            echo "::error::No distribution tarball found under build/."
            find build -maxdepth 3 -type f -print || true
            exit 1
          fi
          # Store an absolute path so later steps outside 'upstream/' can read it
          TARBALL_ABS="$(pwd)/$TARBALL"
          D "Using tarball: $TARBALL"
          D "Using tarball (abs): $TARBALL_ABS"
          (du -h "$TARBALL_ABS" | sed 's/^/::debug::[du] /') || true
          (sha256sum "$TARBALL_ABS" | sed 's/^/::debug::[sha256] /') || true
          echo "$TARBALL_ABS" > "$GITHUB_WORKSPACE/.tarball-path"
          echo "::endgroup::"

      - name: Prepare snap payload (clean non-Linux bits)
        run: |
          set -euo pipefail
          D(){ echo "::debug::$*"; }
          echo "::group::Extract and slim payload"
          mkdir -p snap/local
          TARBALL=$(cat .tarball-path)
          D "Workspace: $(pwd)"
          D "Tarball path from file: $TARBALL"
          if [ ! -f "$TARBALL" ]; then
            echo "::warning::Tarball not found at recorded path: $TARBALL"
            # Fallback: if relative path was mistakenly stored, try under upstream/
            if [ -f "upstream/$TARBALL" ]; then
              TARBALL="upstream/$TARBALL"
              D "Adjusted tarball path to: $TARBALL"
            fi
          fi
          VERSION='${{ steps.ver.outputs.version }}'
          WORK=workpkg
          rm -rf "$WORK"
          mkdir -p "$WORK"
          # Extract tarball contents (expecting top-level bin/, conf/, lib/)
          tar -xzf "$TARBALL" -C "$WORK"
          # All platform-specific trimming happens in snapcraft override-prime
          D "Packaging payload for arch=${{ matrix.arch }} version=${VERSION}"
          find "$WORK" -maxdepth 2 -type f -print | sed 's/^/::debug::[payload] /'
          echo "::endgroup::"
          echo "::group::Create payload tar"
          tar -C "$WORK" -czf "snap/local/cryptad-v${VERSION}.tar.gz" ./
          (ls -la snap/local | sed 's/^/::debug::[snap-local] /')
          echo "::endgroup::"

      - name: Prepare desktop assets (icon)
        run: |
          set -euo pipefail
          echo "::group::Prepare desktop icon"
          mkdir -p snap/gui
          if [ -f assets/crypta-logo.png ]; then
            cp -f assets/crypta-logo.png snap/gui/cryptad.png
            (ls -la snap/gui | sed 's/^/::debug::[snap-gui] /')
          else
            echo "::warning::assets/crypta-logo.png not found; desktop icon will be missing"
          fi
          echo "::endgroup::"

      - name: Generate snapcraft.yaml from template
        run: |
          set -euo pipefail
          D(){ echo "::debug::$*"; }
          echo "::group::Generate snapcraft.yaml"
          VERSION='${{ steps.ver.outputs.version }}'
          sed "s/__VERSION__/${VERSION}/g" snap/snapcraft.yaml.template > snap/snapcraft.yaml
          D "Generated snap/snapcraft.yaml (first 160 lines):"
          (sed -n '1,160p' snap/snapcraft.yaml | sed 's/^/::debug::[snapcraft.yaml] /')
          D "Host arch: $(dpkg --print-architecture || true)"
          D "Kernel: $(uname -a)"
          echo "::endgroup::"

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v3

      - name: Build snap (native arch, no LXD)
        env:
          SNAPCRAFT_BUILD_ENVIRONMENT: host
        run: |
          echo "::group::snapcraft ${{ matrix.arch }} (pack on host)"
          sudo -E snapcraft pack --platform ${{ matrix.arch }}
          echo "::endgroup::"

      - name: List built snaps
        run: |
          echo "::group::List .snap files in workspace"
          find . -maxdepth 2 -type f -name '*.snap' -print | sed 's/^/::debug::[snap] /' || true
          echo "::endgroup::"

      - name: Upload amd64 snap
        if: matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-snap-${{ steps.ver.outputs.version }}-amd64
          path: |
            ./*_amd64.snap
            ./snap/*_amd64.snap
          if-no-files-found: error

      - name: Upload arm64 snap
        if: matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-snap-${{ steps.ver.outputs.version }}-arm64
          path: |
            ./*_arm64.snap
            ./snap/*_arm64.snap
          if-no-files-found: error
