name: Build cryptad windows installers (x64/arm64)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version> in upstream"
        required: false
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        default: "main"
  workflow_call:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version> in upstream"
        required: false
        type: string
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        type: string
        default: "main"
    outputs:
      version:
        description: "Resolved version (from inputs or upstream)"
        value: ${{ jobs.resolve.outputs.version }}

jobs:
  resolve:
    name: Resolve upstream ref
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.set.outputs.ref }}
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Decide cryptad git ref
        id: set
        shell: bash
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            echo "ref=release/${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "ref=${{ inputs.branch }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout upstream for version detection
        uses: actions/checkout@v4
        with:
          repository: crypta-network/cryptad
          ref: ${{ steps.set.outputs.ref }}
          path: upstream

      - name: Set up JDK 21 (temurin) for Gradle introspection
        if: ${{ !inputs.version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Resolve version (Gradle tasks/properties or git describe)
        id: ver
        shell: bash
        working-directory: upstream
        run: |
          set -euo pipefail
          VERSION='${{ inputs.version }}'
          if [ -z "$VERSION" ]; then
            if ./gradlew -q tasks --all > ../_tasks.txt 2>&1; then
              if grep -Eq '(^|\s)printVersion(\s|$)' ../_tasks.txt; then
                if ./gradlew -q printVersion > ../_pver.txt 2>&1; then
                  VERSION=$(tail -n1 ../_pver.txt | tr -d '\r\n\t' | xargs || true)
                fi
              fi
            fi
          fi
          if [ -z "$VERSION" ]; then
            if ./gradlew -q properties > ../_props.txt 2>&1; then
              PVER=$(awk -F': ' '/^version:/{print $2; exit}' ../_props.txt | tr -d '\r\n\t' | xargs)
              if [ -n "$PVER" ] && [ "$PVER" != "unspecified" ]; then
                VERSION="$PVER"
              fi
            fi
          fi
          if [ -z "$VERSION" ]; then
            VERSION=$(git describe --tags --always --abbrev=0 2>/dev/null | sed 's/^v//') || true
          fi
          if [ -z "$VERSION" ]; then
            echo "::error::Unable to resolve version"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  # This job calls the reusable workflow that builds Windows installers via Inno Setup
  windows:
    name: Upstream Windows build (reusable)
    needs: [resolve]
    uses: crypta-network/wininstaller-innosetup/.github/workflows/build.yml@master
    secrets: inherit
    with:
      # Map our version/branch inputs into the expected cryptad-git-ref
      cryptad-git-ref: ${{ needs.resolve.outputs.ref }}
      jdk-version: '21'
      # Use default matrix (windows-latest, windows-11-arm) provided by reusable workflow
      upload-installer: true

  collect:
    name: Collect + reupload artifacts
    needs: [resolve, windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download installer (x64)
        uses: actions/download-artifact@v4
        with:
          name: cryptainstaller-x64
          path: artifacts/cryptainstaller-x64
          if-no-files-found: warn

      - name: Download installer (arm64)
        uses: actions/download-artifact@v4
        with:
          name: cryptainstaller-arm64
          path: artifacts/cryptainstaller-arm64
          if-no-files-found: warn

      - name: Download jpackage image (x64)
        uses: actions/download-artifact@v4
        with:
          name: cryptad-jpackage-x64
          path: artifacts/cryptad-jpackage-x64
          if-no-files-found: warn

      - name: Download jpackage image (arm64)
        uses: actions/download-artifact@v4
        with:
          name: cryptad-jpackage-arm64
          path: artifacts/cryptad-jpackage-arm64
          if-no-files-found: warn

      - name: List downloaded files
        run: |
          echo "::group::Downloaded artifacts"
          find artifacts -type f -maxdepth 2 -print | sed 's/^/::debug::[dl] /' || true
          echo "::endgroup::"

      - name: Normalize Windows installer filenames
        shell: bash
        run: |
          set -euo pipefail
          VERSION='${{ needs.resolve.outputs.version }}'
          mkdir -p artifacts-windows
          X64_SRC=$(find artifacts/cryptainstaller-x64 -type f -name '*.exe' -print | head -n1 || true)
          ARM64_SRC=$(find artifacts/cryptainstaller-arm64 -type f -name '*.exe' -print | head -n1 || true)
          if [ -n "$X64_SRC" ] && [ -n "$VERSION" ]; then
            cp -f "$X64_SRC" "artifacts-windows/CryptaInstaller-v${VERSION}-x64.exe"
            echo "::debug::Renamed $X64_SRC -> artifacts-windows/CryptaInstaller-v${VERSION}-x64.exe"
          fi
          if [ -n "$ARM64_SRC" ] && [ -n "$VERSION" ]; then
            cp -f "$ARM64_SRC" "artifacts-windows/CryptaInstaller-v${VERSION}-arm64.exe"
            echo "::debug::Renamed $ARM64_SRC -> artifacts-windows/CryptaInstaller-v${VERSION}-arm64.exe"
          fi

      - name: Upload Windows installer (x64)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-windows-installer-x64
          path: artifacts-windows/CryptaInstaller-v${{ needs.resolve.outputs.version }}-x64.exe
          if-no-files-found: warn

      - name: Upload Windows installer (arm64)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-windows-installer-arm64
          path: artifacts-windows/CryptaInstaller-v${{ needs.resolve.outputs.version }}-arm64.exe
          if-no-files-found: warn

      - name: Upload Windows jpackage image (x64)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-windows-jpackage-x64
          path: artifacts/cryptad-jpackage-x64/**
          if-no-files-found: warn

      - name: Upload Windows jpackage image (arm64)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-windows-jpackage-arm64
          path: artifacts/cryptad-jpackage-arm64/**
          if-no-files-found: warn
