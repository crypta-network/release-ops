name: Build cryptad macOS dmg (arm64)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version>"
        required: false
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        default: "main"
  workflow_call:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version>"
        required: false
        type: string
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        type: string
        default: "main"
    outputs:
      version:
        description: "Resolved version used for this build"
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            runner: macos-latest

    steps:
      - name: Checkout release-ops repo
        uses: actions/checkout@v4

      - name: Prepare upstream (version + baseline build)
        id: prepare
        uses: ./.github/actions/prepare-cryptad
        with:
          version: ${{ inputs.version }}
          branch: ${{ inputs.branch }}
          run_tests: "false"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Environment diag (arch + OS)
        run: |
          echo "::debug::Host arch: $(uname -m)"
          echo "::debug::macOS: $(sw_vers | tr '\n' ' ' )"
          echo "::debug::Java: $(java -version 2>&1 | head -n1)"

      - name: Locate built DMG
        id: locate
        working-directory: upstream
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Find dmg outputs"
          # Prefer jpackage outputs first, but fall back to any *.dmg under the tree
          (
            find build/jpackage -type f -name '*.dmg' -print 2>/dev/null || true
            find . -type f -name '*.dmg' -print
          ) | awk ' !seen[$0]++ ' | tee ../_dmg_list.txt | sed 's/^/::debug::[dmg] /' || true
          echo "::endgroup::"
          DMG_FILES=$(cat ../_dmg_list.txt || true)
          if [ -n "$DMG_FILES" ]; then
            printf 'dmg_paths<<EOF\n%s\nEOF\n' "$DMG_FILES" >> "$GITHUB_OUTPUT"
          else
            echo "::error::No .dmg produced by jpackage."
            exit 1
          fi

      - name: Prepare flat artifact dir (dmg)
        working-directory: upstream
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ../artifacts-dmg
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            f=${f#./}
            cp -f "$f" ../artifacts-dmg/
          done <<< "${{ steps.locate.outputs.dmg_paths }}"
          echo "::group::Flattened dmg files"
          ls -la ../artifacts-dmg | sed 's/^/::debug::[dmg-flat] /'
          echo "::endgroup::"

      - name: Upload macOS DMG (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-dmg-${{ steps.prepare.outputs.version }}-arm64
          path: artifacts-dmg
          if-no-files-found: error
