name: Build cryptad flatpak (x86_64/aarch64)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version>"
        required: false
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        default: "main"
  workflow_call:
    inputs:
      version:
        description: "Version number (e.g. 1.2.3). If set, checks out release/<version>"
        required: false
        type: string
        default: ""
      branch:
        description: "Branch or tag to build when version is empty"
        required: false
        type: string
        default: "main"
    outputs:
      version:
        description: "Resolved version used for this build"
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - flatpak_arch: x86_64
            runner: ubuntu-latest
          - flatpak_arch: aarch64
            runner: ubuntu-24.04-arm

    steps:
      - name: Checkout release-ops repo
        uses: actions/checkout@v4

      - name: Prepare upstream (version + dist tarball)
        id: prepare
        uses: ./.github/actions/prepare-cryptad
        with:
          version: ${{ inputs.version }}
          branch: ${{ inputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Flatpak payload (repack)
        id: repack
        uses: ./.github/actions/repack-payload
        with:
          tarball_path: ${{ steps.prepare.outputs.tarball_path }}
          version: ${{ steps.prepare.outputs.version }}
          output_dir: flatpak/local

      - name: Generate Flatpak manifest from template
        uses: ./.github/actions/render-manifest
        with:
          template_path: flatpak/cryptad.yaml.template
          output_path: flatpak/cryptad.yaml
          substitutions: |
            __VERSION__=${{ steps.prepare.outputs.version }}
          preview_lines: "200"

      - name: Render desktop file from shared template (Flatpak)
        uses: ./.github/actions/render-desktop
        with:
          template_path: desktop/cryptad.desktop.template
          exec_name: cryptad-launcher
          icon_name: network.crypta.cryptad
          output_path: flatpak/cryptad.desktop

      - name: Render AppStream metainfo (Flatpak)
        uses: ./.github/actions/render-manifest
        with:
          template_path: flatpak/network.crypta.cryptad.metainfo.xml.template
          output_path: flatpak/network.crypta.cryptad.metainfo.xml
          substitutions: |
            __VERSION__=${{ steps.prepare.outputs.version }}
          preview_lines: "120"

      - name: Install Flatpak tooling and runtimes
        run: |
          set -euo pipefail
          echo "::group::Install flatpak + flatpak-builder"
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          echo "::endgroup::"
          echo "::group::Configure flathub remote"
          # Add flathub to the user installation (match --user usage later)
          flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak --user remotes -d | sed 's/^/::debug::[remotes] /'
          echo "::endgroup::"
          echo "::group::Install freedesktop runtime+sdk 24.08"
          flatpak --user --noninteractive install -y flathub org.freedesktop.Platform//24.08 org.freedesktop.Sdk//24.08
          echo "::endgroup::"

      - name: Build Flatpak (manifest)
        env:
          FLATPAK_DEFAULT_ARCH: ${{ matrix.flatpak_arch }}
        run: |
          set -euo pipefail
          echo "::group::flatpak-builder ${{ matrix.flatpak_arch }}"
          rm -rf builddir repo
          flatpak-builder --force-clean --user --arch=${{ matrix.flatpak_arch }} \
            --install-deps-from=flathub \
            builddir flatpak/cryptad.yaml
          echo "::endgroup::"

      - name: Export and bundle Flatpak
        run: |
          set -euo pipefail
          VERSION='${{ steps.prepare.outputs.version }}'
          APPID='network.crypta.cryptad'
          BRANCH="v${VERSION}"
          echo "::group::Export repo"
          # Export to the same branch we'll bundle (defaults to 'master' if omitted)
          flatpak build-export --arch=${{ matrix.flatpak_arch }} repo builddir "$BRANCH"
          echo "::endgroup::"
          echo "::group::Create bundle"
          BUNDLE="cryptad-v${VERSION}-${{ matrix.flatpak_arch }}.flatpak"
          flatpak build-bundle repo "$BUNDLE" "$APPID" "$BRANCH" --arch=${{ matrix.flatpak_arch }}
          ls -la "$BUNDLE"
          echo "::endgroup::"

      - name: Upload x86_64 Flatpak bundle
        if: matrix.flatpak_arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-flatpak-${{ steps.prepare.outputs.version }}-x86_64
          path: cryptad-v${{ steps.prepare.outputs.version }}-x86_64.flatpak
          if-no-files-found: error

      - name: Upload aarch64 Flatpak bundle
        if: matrix.flatpak_arch == 'aarch64'
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-flatpak-${{ steps.prepare.outputs.version }}-aarch64
          path: cryptad-v${{ steps.prepare.outputs.version }}-aarch64.flatpak
          if-no-files-found: error
