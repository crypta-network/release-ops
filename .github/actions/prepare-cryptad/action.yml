name: "Prepare CryptaD upstream build"
description: "Checks out upstream cryptad, resolves version, builds dist, and exposes tarball path/version"
inputs:
  version:
    description: "Version number (e.g. 1.2.3). If set, checks out release/<version>"
    required: false
    default: ""
  branch:
    description: "Branch or tag to build when version is empty"
    required: false
    default: "main"
  upstream_repository:
    description: "Upstream repository to checkout"
    required: false
    default: "crypta-network/cryptad"
  upstream_path:
    description: "Path to checkout upstream into"
    required: false
    default: "upstream"
  run_tests:
    description: "Whether to run tests during the build (true/false)"
    required: false
    default: "true"
outputs:
  version:
    description: "Resolved version"
    value: ${{ steps.ver.outputs.version }}
  tarball_path:
    description: "Absolute path to upstream distribution tarball"
    value: ${{ steps.build.outputs.tarball_path }}
runs:
  using: "composite"
  steps:
    - name: Decide upstream ref
      id: ref
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Select upstream ref"
        if [ -n "${{ inputs.version }}" ]; then
          SELECTED="release/${{ inputs.version }}"
        else
          SELECTED="${{ inputs.branch }}"
        fi
        echo "::debug::Selected upstream ref: $SELECTED"
        echo "ref=$SELECTED" >> "$GITHUB_OUTPUT"
        echo "::endgroup::"

    - name: Checkout upstream cryptad (${{ steps.ref.outputs.ref }})
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.upstream_repository }}
        ref: ${{ steps.ref.outputs.ref }}
        path: ${{ inputs.upstream_path }}

    - name: Set up JDK 21 (temurin)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: "21"
        cache: gradle

    - name: Determine version via gradle printVersion or fallback
      id: ver
      shell: bash
      working-directory: ${{ inputs.upstream_path }}
      run: |
        set -euo pipefail
        D(){ echo "::debug::$*"; }
        echo "::group::Resolve version"
        VERSION_INPUT='${{ inputs.version }}'
        if [ -n "$VERSION_INPUT" ]; then
          VERSION="$VERSION_INPUT"
        else
          VERSION=""
          echo "::group::List Gradle tasks"
          D "Listing Gradle tasks (for printVersion)..."
          if ! ./gradlew -q tasks --all > ../_gradle_tasks.txt 2>&1; then
            D "gradlew tasks failed (continuing). Exit recorded."
          fi
          D "Tasks grep (printVersion):"
          grep -i "printVersion" ../_gradle_tasks.txt | sed 's/^/::debug::[tasks] /' || true
          echo "::endgroup::"
          if grep -Eq '(^|\s)printVersion(\s|$)' ../_gradle_tasks.txt; then
            echo "::group::Run printVersion task"
            D "printVersion task detected; invoking..."
            if ./gradlew -q printVersion > ../_printVersion.txt 2>&1; then
              tail -n +1 ../_printVersion.txt | sed 's/^/::debug::[printVersion] /'
              VERSION=$(tail -n1 ../_printVersion.txt | tr -d '\r\n\t' | xargs || true)
            else
              D "printVersion task run failed (continuing)."
            fi
            echo "::endgroup::"
          else
            D "No printVersion task found."
          fi
          if [ -z "$VERSION" ]; then
            echo "::group::Gradle properties (version)"
            D "Querying Gradle properties for project version..."
            if ./gradlew -q properties > ../_gradle_properties.txt 2>&1; then
              tail -n +1 ../_gradle_properties.txt | sed 's/^/::debug::[properties] /' | head -n 40 || true
              PVER=$(awk -F': ' '/^version:/{print $2; exit}' ../_gradle_properties.txt)
              PVER=$(echo "$PVER" | tr -d '\r\n\t' | xargs)
            else
              D "gradlew properties failed (continuing)."
              PVER=""
            fi
            if [ -n "$PVER" ] && [ "$PVER" != "unspecified" ]; then
              VERSION="$PVER"
            fi
            echo "::endgroup::"
          fi
          if [ -z "$VERSION" ]; then
            echo "::group::git describe fallback"
            VERSION=$(git describe --tags --always --abbrev=0 2>/dev/null | sed 's/^v//') || true
            D "git describe version candidate: ${VERSION:-<empty>}"
            echo "::endgroup::"
          fi
        fi
        if [ -z "$VERSION" ]; then
          echo "::error::Unable to determine version"
          exit 1
        fi
        echo "::debug::Resolved version: $VERSION"
        echo "version=$VERSION" | tee -a "$GITHUB_OUTPUT"
        echo "::endgroup::"

    - name: Build upstream project (dist)
      id: build
      shell: bash
      working-directory: ${{ inputs.upstream_path }}
      env:
        # Expect the caller workflow to pass GITHUB_TOKEN via env passthrough
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        D(){ echo "::debug::$*"; }
        echo "::group::Java/Gradle versions"
        D "Java version:" && (java -version 2>&1 | sed 's/^/::debug::[java] /') || true
        D "Gradle version:" && (./gradlew -v 2>&1 | sed 's/^/::debug::[gradle] /') || true
        echo "::endgroup::"
        # Ensure GitHub API calls made via HttpURLConnection include a User-Agent header on all runners
        export JAVA_TOOL_OPTIONS="${JAVA_TOOL_OPTIONS:-} -Dhttp.agent=cryptad-ci/${GITHUB_RUN_ID:-local}"
        echo "::group::Gradle build"
        # Run tests; skip only Spotless tasks which are not needed for CI packaging
        SKIPS=(
          -x spotlessApply
          -x spotlessCheck
          -x spotlessJava
          -x spotlessJavaApply
          -x spotlessJavaCheck
          -x spotlessKotlin
          -x spotlessKotlinApply
          -x spotlessKotlinCheck
          -x spotlessKotlinGradle
          -x spotlessKotlinGradleApply
          -x spotlessInternalRegisterDependencies
        )
        if [ "${{ inputs.run_tests }}" != "true" ]; then
          SKIPS+=( -x test )
          echo "::debug::Tests are disabled by input run_tests=false"
        fi
        ./gradlew -S "${SKIPS[@]}" build
        echo "::endgroup::"
        VERSION='${{ steps.ver.outputs.version }}'
        TARBALL="build/distributions/cryptad-jlink-v${VERSION}.tar.gz"
        echo "::group::Locate distribution tarball"
        D "Looking for $TARBALL"
        (ls -la build/distributions | sed 's/^/::debug::[dist] /') || true
        if [ ! -f "$TARBALL" ]; then
          TARBALL=$(find build -type f -name 'cryptad-*.tar.gz' | head -n1 || true)
          D "Fallback tarball: ${TARBALL:-<none>}"
        fi
        if [ -z "$TARBALL" ] || [ ! -f "$TARBALL" ]; then
          echo "::error::No distribution tarball found under build/."
          find build -maxdepth 3 -type f -print || true
          exit 1
        fi
        TARBALL_ABS="$(pwd)/$TARBALL"
        D "Using tarball: $TARBALL"
        D "Using tarball (abs): $TARBALL_ABS"
        (du -h "$TARBALL_ABS" | sed 's/^/::debug::[du] /') || true
        (sha256sum "$TARBALL_ABS" | sed 's/^/::debug::[sha256] /') || true
        echo "tarball_path=$TARBALL_ABS" >> "$GITHUB_OUTPUT"
        echo "$TARBALL_ABS" > "$GITHUB_WORKSPACE/.tarball-path"
        echo "::endgroup::"
